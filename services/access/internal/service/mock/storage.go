// Code generated by MockGen. DO NOT EDIT.
// Source: ./services/access/internal/service/storage.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	core "github.com/de1phin/iam/services/access/internal/core"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddRole mocks base method
func (m *MockStorage) AddRole(ctx context.Context, role core.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRole", ctx, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRole indicates an expected call of AddRole
func (mr *MockStorageMockRecorder) AddRole(ctx, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRole", reflect.TypeOf((*MockStorage)(nil).AddRole), ctx, role)
}

// GetRole mocks base method
func (m *MockStorage) GetRole(ctx context.Context, name string) (core.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", ctx, name)
	ret0, _ := ret[0].(core.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole
func (mr *MockStorageMockRecorder) GetRole(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockStorage)(nil).GetRole), ctx, name)
}

// DeleteRole mocks base method
func (m *MockStorage) DeleteRole(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole
func (mr *MockStorageMockRecorder) DeleteRole(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockStorage)(nil).DeleteRole), ctx, name)
}

// AddAccessBinding mocks base method
func (m *MockStorage) AddAccessBinding(ctx context.Context, binding core.AccessBinding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAccessBinding", ctx, binding)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAccessBinding indicates an expected call of AddAccessBinding
func (mr *MockStorageMockRecorder) AddAccessBinding(ctx, binding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAccessBinding", reflect.TypeOf((*MockStorage)(nil).AddAccessBinding), ctx, binding)
}

// HaveAccessBinding mocks base method
func (m *MockStorage) HaveAccessBinding(ctx context.Context, accountID, resource, permission string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HaveAccessBinding", ctx, accountID, resource, permission)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HaveAccessBinding indicates an expected call of HaveAccessBinding
func (mr *MockStorageMockRecorder) HaveAccessBinding(ctx, accountID, resource, permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HaveAccessBinding", reflect.TypeOf((*MockStorage)(nil).HaveAccessBinding), ctx, accountID, resource, permission)
}

// DeleteAccessBinding mocks base method
func (m *MockStorage) DeleteAccessBinding(ctx context.Context, binding core.AccessBinding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccessBinding", ctx, binding)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccessBinding indicates an expected call of DeleteAccessBinding
func (mr *MockStorageMockRecorder) DeleteAccessBinding(ctx, binding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccessBinding", reflect.TypeOf((*MockStorage)(nil).DeleteAccessBinding), ctx, binding)
}

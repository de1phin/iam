// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

type Cache_Expecter struct {
	mock *mock.Mock
}

func (_m *Cache) EXPECT() *Cache_Expecter {
	return &Cache_Expecter{mock: &_m.Mock}
}

// DeleteSsh provides a mock function with given fields: ctx, ssh
func (_m *Cache) DeleteSsh(ctx context.Context, ssh string) error {
	ret := _m.Called(ctx, ssh)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, ssh)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_DeleteSsh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSsh'
type Cache_DeleteSsh_Call struct {
	*mock.Call
}

// DeleteSsh is a helper method to define mock.On call
//   - ctx context.Context
//   - ssh string
func (_e *Cache_Expecter) DeleteSsh(ctx interface{}, ssh interface{}) *Cache_DeleteSsh_Call {
	return &Cache_DeleteSsh_Call{Call: _e.mock.On("DeleteSsh", ctx, ssh)}
}

func (_c *Cache_DeleteSsh_Call) Run(run func(ctx context.Context, ssh string)) *Cache_DeleteSsh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Cache_DeleteSsh_Call) Return(_a0 error) *Cache_DeleteSsh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_DeleteSsh_Call) RunAndReturn(run func(context.Context, string) error) *Cache_DeleteSsh_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteToken provides a mock function with given fields: ctx, ssh
func (_m *Cache) DeleteToken(ctx context.Context, ssh string) error {
	ret := _m.Called(ctx, ssh)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, ssh)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_DeleteToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteToken'
type Cache_DeleteToken_Call struct {
	*mock.Call
}

// DeleteToken is a helper method to define mock.On call
//   - ctx context.Context
//   - ssh string
func (_e *Cache_Expecter) DeleteToken(ctx interface{}, ssh interface{}) *Cache_DeleteToken_Call {
	return &Cache_DeleteToken_Call{Call: _e.mock.On("DeleteToken", ctx, ssh)}
}

func (_c *Cache_DeleteToken_Call) Run(run func(ctx context.Context, ssh string)) *Cache_DeleteToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Cache_DeleteToken_Call) Return(_a0 error) *Cache_DeleteToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_DeleteToken_Call) RunAndReturn(run func(context.Context, string) error) *Cache_DeleteToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetSsh provides a mock function with given fields: ctx, token
func (_m *Cache) GetSsh(ctx context.Context, token string) (string, error) {
	ret := _m.Called(ctx, token)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cache_GetSsh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSsh'
type Cache_GetSsh_Call struct {
	*mock.Call
}

// GetSsh is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *Cache_Expecter) GetSsh(ctx interface{}, token interface{}) *Cache_GetSsh_Call {
	return &Cache_GetSsh_Call{Call: _e.mock.On("GetSsh", ctx, token)}
}

func (_c *Cache_GetSsh_Call) Run(run func(ctx context.Context, token string)) *Cache_GetSsh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Cache_GetSsh_Call) Return(_a0 string, _a1 error) *Cache_GetSsh_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Cache_GetSsh_Call) RunAndReturn(run func(context.Context, string) (string, error)) *Cache_GetSsh_Call {
	_c.Call.Return(run)
	return _c
}

// GetToken provides a mock function with given fields: ctx, ssh
func (_m *Cache) GetToken(ctx context.Context, ssh string) (string, error) {
	ret := _m.Called(ctx, ssh)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, ssh)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, ssh)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ssh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cache_GetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetToken'
type Cache_GetToken_Call struct {
	*mock.Call
}

// GetToken is a helper method to define mock.On call
//   - ctx context.Context
//   - ssh string
func (_e *Cache_Expecter) GetToken(ctx interface{}, ssh interface{}) *Cache_GetToken_Call {
	return &Cache_GetToken_Call{Call: _e.mock.On("GetToken", ctx, ssh)}
}

func (_c *Cache_GetToken_Call) Run(run func(ctx context.Context, ssh string)) *Cache_GetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Cache_GetToken_Call) Return(_a0 string, _a1 error) *Cache_GetToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Cache_GetToken_Call) RunAndReturn(run func(context.Context, string) (string, error)) *Cache_GetToken_Call {
	_c.Call.Return(run)
	return _c
}

// SetSsh provides a mock function with given fields: ctx, token, ssh
func (_m *Cache) SetSsh(ctx context.Context, token string, ssh string) error {
	ret := _m.Called(ctx, token, ssh)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, token, ssh)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_SetSsh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSsh'
type Cache_SetSsh_Call struct {
	*mock.Call
}

// SetSsh is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - ssh string
func (_e *Cache_Expecter) SetSsh(ctx interface{}, token interface{}, ssh interface{}) *Cache_SetSsh_Call {
	return &Cache_SetSsh_Call{Call: _e.mock.On("SetSsh", ctx, token, ssh)}
}

func (_c *Cache_SetSsh_Call) Run(run func(ctx context.Context, token string, ssh string)) *Cache_SetSsh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Cache_SetSsh_Call) Return(_a0 error) *Cache_SetSsh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_SetSsh_Call) RunAndReturn(run func(context.Context, string, string) error) *Cache_SetSsh_Call {
	_c.Call.Return(run)
	return _c
}

// SetToken provides a mock function with given fields: ctx, ssh, token
func (_m *Cache) SetToken(ctx context.Context, ssh string, token string) error {
	ret := _m.Called(ctx, ssh, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, ssh, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cache_SetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetToken'
type Cache_SetToken_Call struct {
	*mock.Call
}

// SetToken is a helper method to define mock.On call
//   - ctx context.Context
//   - ssh string
//   - token string
func (_e *Cache_Expecter) SetToken(ctx interface{}, ssh interface{}, token interface{}) *Cache_SetToken_Call {
	return &Cache_SetToken_Call{Call: _e.mock.On("SetToken", ctx, ssh, token)}
}

func (_c *Cache_SetToken_Call) Run(run func(ctx context.Context, ssh string, token string)) *Cache_SetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Cache_SetToken_Call) Return(_a0 error) *Cache_SetToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Cache_SetToken_Call) RunAndReturn(run func(context.Context, string, string) error) *Cache_SetToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
